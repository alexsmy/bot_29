# START OF FILE bot.py

import os
import sys
import uuid
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants, BotCommand, InputTextMessageContent, InlineQueryResultArticle
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters, InlineQueryHandler

import database
from main import manager  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ main
from logger_config import logger
from config import (
    PRIVATE_ROOM_LIFETIME_HOURS,
    ADMIN_ROOM_LIFETIME_1_HOUR,
    ADMIN_ROOM_LIFETIME_1_DAY,
    ADMIN_ROOM_LIFETIME_1_MONTH,
    ADMIN_ROOM_LIFETIME_1_YEAR
)

# --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –∑–¥–µ—Å—å, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ ---
bot_token = os.environ.get("BOT_TOKEN")
if not bot_token:
    logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    sys.exit(1)

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ main.py –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
async def post_init(application: Application) -> None:
    public_commands = [
        BotCommand("start", "üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞"),
        BotCommand("instructions", "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
        BotCommand("faq", "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
    ]
    await application.bot.set_my_commands(public_commands)
    logger.info("–ú–µ–Ω—é –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

# –°–æ–∑–¥–∞–µ–º, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ main.py
builder = Application.builder().token(bot_token).post_init(post_init)
bot_app_instance = builder.build()
# --- –ö–û–ù–ï–¶ –ö–õ–Æ–ß–ï–í–û–ì–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---


def format_hours(hours: int) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å—ã (1 —á–∞—Å, 2 —á–∞—Å–∞, 5 —á–∞—Å–æ–≤)."""
    if hours % 10 == 1 and hours % 100 != 11:
        return f"{hours} —á–∞—Å"
    elif 2 <= hours % 10 <= 4 and (hours % 100 < 10 or hours % 100 >= 20):
        return f"{hours} —á–∞—Å–∞"
    else:
        return f"{hours} —á–∞—Å–æ–≤"

def read_template_content(filename: str, replacements: dict = None) -> str:
    template_path = os.path.join("templates", filename)
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if replacements:
                for key, value in replacements.items():
                    content = content.replace(f"{{{key}}}", str(value))
            return content
    except FileNotFoundError:
        logger.critical(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
        return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."

async def log_user_and_action(update: Update, action: str):
    user = update.effective_user
    await database.log_user(user.id, user.first_name, user.last_name, user.username)
    await database.log_bot_action(user.id, action)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await log_user_and_action(update, "/start")
    user_name = update.effective_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {update.effective_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")

    keyboard = [
        [InlineKeyboardButton("üîó –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="create_private_link")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ- –∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞. "
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.\n\n"
        f"–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {format_hours(PRIVATE_ROOM_LIFETIME_HOURS)}."
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def instructions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await log_user_and_action(update, "/instructions")
    user_name = update.effective_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {update.effective_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")

    instructions_text = read_template_content("instructions_bot.html")
    
    await update.message.reply_text(instructions_text, parse_mode=constants.ParseMode.HTML)

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await log_user_and_action(update, "/faq")
    user_name = update.effective_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {update.effective_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª FAQ.")

    faq_text = read_template_content("faq_bot.html", {"LIFETIME_HOURS": PRIVATE_ROOM_LIFETIME_HOURS})

    await update.message.reply_text(faq_text, parse_mode=constants.ParseMode.HTML)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await log_user_and_action(update, "Sent unhandled message")
    user_name = update.effective_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {update.effective_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    reminder_text = (
        "–Ø —É–º–µ—é —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–∞–Ω–¥—É /start.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:\n"
        "‚Ä¢ /instructions - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "‚Ä¢ /faq - —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
    )
    await update.message.reply_text(reminder_text)

async def _create_and_send_room_link(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int, lifetime_hours: int):
    room_id = str(uuid.uuid4())
    web_app_url = os.environ.get("WEB_APP_URL", "http://localhost:8000")
    if not web_app_url.endswith('/'):
        web_app_url += '/'
    full_link = f"{web_app_url}call/{room_id}"

    await manager.get_or_create_room(room_id, lifetime_hours=lifetime_hours)

    created_at = datetime.now(timezone.utc)
    expires_at = created_at + timedelta(hours=lifetime_hours)
    await database.log_call_session(room_id, user_id, created_at, expires_at)

    link_text = "üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b> üìû"
    lifetime_text = format_hours(lifetime_hours)
    message_text = (
        f"–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞:\n\n"
        f"<a href=\"{full_link}\">{link_text}</a>\n\n"
        f"–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {lifetime_text}.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ **–ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ '–ü–µ—Ä–µ—Å–ª–∞–Ω–æ')."
    )

    keyboard = [
        [InlineKeyboardButton("‚Ü™Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=room_id)],
        [InlineKeyboardButton("üö™ –û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É", url=full_link)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text=message_text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

async def handle_create_link_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await log_user_and_action(update, "create_private_link")
    query = update.callback_query
    await query.answer("–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É...")

    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
    
    await _create_and_send_room_link(context, query.message.chat_id, user.id, PRIVATE_ROOM_LIFETIME_HOURS)

async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.inline_query.query
    if not query:
        return

    try:
        uuid.UUID(query)
    except ValueError:
        return

    room_id = query
    
    lifetime_hours = await database.get_room_lifetime_hours(room_id)
    lifetime_text = format_hours(lifetime_hours)

    web_app_url = os.environ.get("WEB_APP_URL", "http://localhost:8000")
    if not web_app_url.endswith('/'):
        web_app_url += '/'
    full_link = f"{web_app_url}call/{room_id}"
    
    icon_url = f"{web_app_url}static/share_icon.png"

    link_text = "üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b> üìû"
    message_text_for_recipient = (
        f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:\n\n"
        f"<a href=\"{full_link}\">{link_text}</a>\n\n"
        f"–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {lifetime_text}. "
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É', —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
    )
    
    keyboard_for_recipient = [
        [InlineKeyboardButton("üö™ –û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É", url=full_link)]
    ]
    reply_markup_for_recipient = InlineKeyboardMarkup(keyboard_for_recipient)

    result = InlineQueryResultArticle(
        id=room_id,
        title="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫",
        description=f"–ö–æ–º–Ω–∞—Ç–∞: {room_id[:8]}...",
        input_message_content=InputTextMessageContent(
            message_text=message_text_for_recipient,
            parse_mode=constants.ParseMode.HTML,
            disable_web_page_preview=True
        ),
        reply_markup=reply_markup_for_recipient,
        thumbnail_url=icon_url,
        thumbnail_width=128,
        thumbnail_height=128
    )

    await update.inline_query.answer([result], cache_time=1)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await log_user_and_action(update, "/admin")
    user = update.effective_user
    admin_id_str = os.environ.get("ADMIN_USER_ID")

    if not admin_id_str or int(user.id) != int(admin_id_str):
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user.id}.")
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏.")
    
    keyboard = [
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_link")],
        [InlineKeyboardButton("üìû –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤", callback_data="admin_create_room_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def admin_panel_link_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await log_user_and_action(update, "admin_panel_link")

    token = str(uuid.uuid4())
    await database.add_admin_token(token)

    web_app_url = os.environ.get("WEB_APP_URL", "http://localhost:8000")
    if not web_app_url.endswith('/'):
        web_app_url += '/'
    admin_link = f"{web_app_url}admin/{token}"

    await query.edit_message_text(
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{admin_link}\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞."
    )

async def admin_create_room_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await log_user_and_action(update, "admin_create_room_menu")

    keyboard = [
        [
            InlineKeyboardButton("1 —á–∞—Å", callback_data=f"admin_create_room_{ADMIN_ROOM_LIFETIME_1_HOUR}"),
            InlineKeyboardButton("1 —Å—É—Ç–∫–∏", callback_data=f"admin_create_room_{ADMIN_ROOM_LIFETIME_1_DAY}")
        ],
        [
            InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"admin_create_room_{ADMIN_ROOM_LIFETIME_1_MONTH}"),
            InlineKeyboardButton("1 –≥–æ–¥", callback_data=f"admin_create_room_{ADMIN_ROOM_LIFETIME_1_YEAR}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=reply_markup)

async def admin_create_room_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer("–°–æ–∑–¥–∞—é –¥–æ–ª–≥–æ–∂–∏–≤—É—â—É—é —Å—Å—ã–ª–∫—É...")
    
    lifetime_hours = int(query.data.split('_')[-1])
    await log_user_and_action(update, f"admin_create_room_{lifetime_hours}h")
    
    user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name} (ID: {user.id}) —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ {lifetime_hours} —á–∞—Å–æ–≤.")
    
    await query.message.delete()
    await _create_and_send_room_link(context, query.message.chat_id, user.id, lifetime_hours)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
bot_app_instance.add_handler(CommandHandler("start", start))
bot_app_instance.add_handler(CommandHandler("instructions", instructions))
bot_app_instance.add_handler(CommandHandler("faq", faq))
bot_app_instance.add_handler(CommandHandler("admin", admin_command))
bot_app_instance.add_handler(CallbackQueryHandler(handle_create_link_callback, pattern="^create_private_link$"))
bot_app_instance.add_handler(CallbackQueryHandler(admin_panel_link_callback, pattern="^admin_panel_link$"))
bot_app_instance.add_handler(CallbackQueryHandler(admin_create_room_menu_callback, pattern="^admin_create_room_menu$"))
bot_app_instance.add_handler(CallbackQueryHandler(admin_create_room_callback, pattern=r"^admin_create_room_\d+$"))
bot_app_instance.add_handler(InlineQueryHandler(handle_inline_query))
bot_app_instance.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND | filters.ATTACHMENT, echo))

# --- –£–î–ê–õ–ï–ù–ê –í–°–Ø –õ–û–ì–ò–ö–ê –ó–ê–ü–£–°–ö–ê (run_fastapi, main, if __name__ == "__main__") ---
# --- –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç bot_app_instance ---

# END OF FILE bot.py